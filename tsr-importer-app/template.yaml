AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: >
  tsr-importer-app

  Imports data from the TSR S3 bucket into our database, and generates demographic summary data

Globals:
  Function:
    Timeout: 30

Parameters:
  DataPlatformTableName:
    Type: String
    Description: The name of the DynamoDB table that holds all TSR data (1 record per session)
    Default: tsr-data-platform
  QuestionsTableName:
    Type: String
    Description: The name of the DynamoDB table that holds all question data
    Default: tsr-questions
  SummaryTableName:
    Type: String
    Description: The name of the DynamoDB table that holds all question summary data (totals, broken down by demographic)
    Default: tsr-summary

Resources:
  SummaryTable:
    Type: AWS::Serverless::SimpleTable
    TableName: !Ref SummaryTableName
    PrimaryKey:
      Name: DemographicCode
      Type: String

  SummariserFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: tsr-summariser/
      Handler: app.lambdaHandler
      Runtime: nodejs18.x
      Architectures:
        - x86_64
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref DataPlatformTableName
      Environment:
        Variables:
          TSR_QUESTIONS_TABLE_NAME: !Ref QuestionsTableName
          TSR_DATA_PLATFORM_TABLE_NAME: !Ref DataPlatformTableName
          TSR_SUMMARY_TABLE_NAME: !Ref SummaryTableName

    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: es2020
        Sourcemap: true
        EntryPoints:
          - app.ts

  ImporterFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: tsr-importer/
      Handler: app.lambdaHandler
      Runtime: nodejs18.x
      Architectures:
        - x86_64
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: es2020
        Sourcemap: true
        EntryPoints:
          - app.ts

  HelloWorldFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: hello-world/
      Handler: app.lambdaHandler
      Runtime: nodejs18.x
      Architectures:
        - x86_64
      Events:
        HelloWorld:
          Type: Api
          Properties:
            Path: /hello
            Method: get
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: es2020
        Sourcemap: true
        EntryPoints:
          - app.ts

  ApplicationResourceGroup:
    Type: AWS::ResourceGroups::Group
    Properties:
      Name:
        Fn::Sub: ApplicationInsights-SAM-${AWS::StackName}
      ResourceQuery:
        Type: CLOUDFORMATION_STACK_1_0

  ApplicationInsightsMonitoring:
    Type: AWS::ApplicationInsights::Application
    Properties:
      ResourceGroupName:
        Ref: ApplicationResourceGroup
      AutoConfigurationEnabled: "true"

Outputs:
  SummariserFunctionARN:
    Description: Hello World Lambda Function ARN
    Value: !GetAtt SummariserFunction.Arn

  SummariserFunctionIamRole:
    Description: Implicit IAM Role created for Hello World function
    Value: !GetAtt SummariserFunctionRole.Arn

  ImporterFunctionARN:
    Description: Hello World Lambda Function ARN
    Value: !GetAtt ImporterFunction.Arn

  ImporterFunctionIamRole:
    Description: Implicit IAM Role created for Hello World function
    Value: !GetAtt ImporterFunctionRole.Arn

  HelloWorldApi:
    Description: API Gateway endpoint URL for Prod stage for Hello World function
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/hello/"

  HelloWorldFunctionARN:
    Description: Hello World Lambda Function ARN
    Value: !GetAtt HelloWorldFunction.Arn

  HelloWorldFunctionIamRole:
    Description: Implicit IAM Role created for Hello World function
    Value: !GetAtt HelloWorldFunctionRole.Arn
